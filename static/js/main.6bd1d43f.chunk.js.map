{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","services/redux/reducers/userReducer.js","services/redux/reducers/index.js","services/redux/type/user.js","services/redux/config/configureStore.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","background","border","borderRadius","boxShadow","color","height","padding","withRouter","connect","state","user","classes","className","Button","src","logo","alt","href","target","rel","path","exact","component","_props","Boolean","window","location","hostname","match","initialState","action","payload","type","middlewares","thunk","createStateSyncMiddleware","whitelist","persistConfig","key","storage","rootReducer","otherReducer","allReducers","combineReducers","persistedReducer","persistReducer","persistantStore","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","undefined","compose","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,wQCOrCC,G,MAAYC,YAAW,CAC3BC,KAAM,CACJC,WAAY,mDACZC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,aAoCb,IAGeC,cACbC,aAJsB,SAAAC,GAAK,MAAK,CAChCC,KAAMD,EAAMC,QAGZF,EApCF,WACE,IAAMG,EAAUd,IAChB,OACE,yBAAKe,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQD,UAAWD,EAAQZ,MAA3B,eAGA,4BAAQa,UAAU,cAChB,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEJ,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,kBAAC,IAAD,KACI,kBAAC,IAAD,CACEC,KAAK,IACLC,OAAK,EACLC,UAAW,SAAAC,GAAM,OAAI,8CChCbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6DChBAC,EAAe,GCAN,GACXnB,KDCW,WAAmC,IAAlCD,EAAiC,uDAAzBoB,EAAcC,EAAW,uCACvCC,EAAkBD,EAAlBC,QAASC,EAASF,EAATE,KAEjB,OAAQA,GACN,IERoB,WFWpB,IEVsB,aFWpB,OAAOD,EAET,QACE,OAAOtB,K,QGLPwB,EAAc,CAChBC,IACAC,oCAA0B,CAEtBC,UAAW,CACP,WAKNC,EAAgB,CAClBC,IAAK,OACLC,YACAH,UAAW,CACP,SAaA1B,EAA0B8B,EAA1B9B,KAAS+B,E,YAAiBD,E,UAC5BE,EAAcC,YAAgB,aAChCjC,QACC+B,IAGCG,EAAmBC,YAAeR,EAAeK,GC/BjDI,EDiCS,WACX,IAAIC,EAAQC,YACVJ,EACAnB,OAAOwB,8BAAgCxB,OAAOwB,oCAC9CC,EACAC,YAAQC,IAAe,WAAf,EAAmBnB,KAG7B,MAAO,CAAEc,QAAOM,UADAC,YAAaP,ICxCTA,GAExBQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUV,MAAOD,EAAgBC,OAC/B,kBAAC,IAAD,CAAaW,QAAS,KAAML,UAAWP,EAAgBO,WACnD,kBAAC,IAAD,KACI,kBAAC,EAAD,UAKZM,SAASC,eAAe,SL2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6bd1d43f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className=\"App\">\n      <Button className={classes.root}>\n        Hello World\n      </Button>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <Switch>\n          <Route\n            path=\"/\"\n            exact\n            component={_props => <div >Home</div>}\n          />\n      </Switch>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  user: state.user,\n});\nexport default withRouter(\n  connect(\n    mapStateToProps,\n  )(App)\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_USER, UNSET_USER } from \"../type\";\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n  const { payload, type } = action;\n\n  switch (type) {\n    case SET_USER:\n      return payload;\n\n    case UNSET_USER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n","import {default as user} from \"./userReducer\";\n\nexport default {\n    user\n}","export const SET_USER = \"SET_USER\";\nexport const UNSET_USER = \"UNSET_USER\";","import { createStore, applyMiddleware, compose, \n    combineReducers \n} from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n// import sessionStorage from \"redux-persist/lib/storage/session\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { createStateSyncMiddleware } from \"redux-state-sync\";\n\nconst middlewares = [\n    thunk,\n    createStateSyncMiddleware({\n        // blacklist: [\"extras\"]\n        whitelist: [\n            \"user\"\n        ]\n    })\n]\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    whitelist: [\n        \"user\"\n    ]\n}\n// const sessionRedConfig = {\n//     key: \"other\",\n//     storage: sessionStorage\n// };\n\n// const { referrer, ...otherReducer } = rootReducer;\n// const allReducers = combineReducers({\n    //   ...otherReducer,\n    //   referrer: persistReducer(sessionRedConfig, referrer)\n// });\nconst { user, ...otherReducer } = rootReducer;\nconst allReducers = combineReducers({\n    user,\n  ...otherReducer\n//   referrer: persistReducer(sessionRedConfig, referrer)\n});\nconst persistedReducer = persistReducer(persistConfig, allReducers);\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport default () => {\n    let store = createStore(\n      persistedReducer,\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n      undefined,\n      compose(applyMiddleware(...middlewares))\n    );\n    let persistor = persistStore(store);\n    return { store, persistor };\n};\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./services/redux/config/configureStore\";\n\nconst persistantStore = store();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={persistantStore.store}>\n      <PersistGate loading={null} persistor={persistantStore.persistor}>\n          <BrowserRouter>\n              <App />\n          </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}